// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.17.3
// source: v1/cluster.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Cluster describes cluster fields
type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uri is the cluster resource URI
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// name is the cluster name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// connected indicates if connection to the cluster has been established
	Connected bool `protobuf:"varint,3,opt,name=connected,proto3" json:"connected,omitempty"`
	// acl is the cluster access control list of the logged-in user
	Acl *ClusterACL `protobuf:"bytes,4,opt,name=acl,proto3" json:"acl,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_v1_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_v1_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *Cluster) GetAcl() *ClusterACL {
	if x != nil {
		return x.Acl
	}
	return nil
}

// ClusterACL is the access control list of the user
type ClusterACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sessions defines access to recorded sessions
	Sessions *ResourceAccess `protobuf:"bytes,1,opt,name=sessions,proto3" json:"sessions,omitempty"`
	// auth_connectors defines access to auth.connectors
	AuthConnectors *ResourceAccess `protobuf:"bytes,2,opt,name=auth_connectors,json=authConnectors,proto3" json:"auth_connectors,omitempty"`
	// Roles roles access to roles
	Roles *ResourceAccess `protobuf:"bytes,3,opt,name=roles,proto3" json:"roles,omitempty"`
	// Users users access to users.
	Users *ResourceAccess `protobuf:"bytes,4,opt,name=users,proto3" json:"users,omitempty"`
	// trusted_clusters defines access to trusted clusters
	TrustedClusters *ResourceAccess `protobuf:"bytes,5,opt,name=trusted_clusters,json=trustedClusters,proto3" json:"trusted_clusters,omitempty"`
	// Events events access to audit logs
	Events *ResourceAccess `protobuf:"bytes,6,opt,name=events,proto3" json:"events,omitempty"`
	// Tokens tokens access to tokens.
	Tokens *ResourceAccess `protobuf:"bytes,7,opt,name=tokens,proto3" json:"tokens,omitempty"`
	// Servers servers access to servers.
	Servers *ResourceAccess `protobuf:"bytes,8,opt,name=servers,proto3" json:"servers,omitempty"`
	// apps defines access to application servers
	Apps *ResourceAccess `protobuf:"bytes,9,opt,name=apps,proto3" json:"apps,omitempty"`
	// dbs defines access to database servers.
	Dbs *ResourceAccess `protobuf:"bytes,10,opt,name=dbs,proto3" json:"dbs,omitempty"`
	// kubeservers defines access to kubernetes servers.
	Kubeservers *ResourceAccess `protobuf:"bytes,11,opt,name=kubeservers,proto3" json:"kubeservers,omitempty"`
	// SSH ssh_logins access to servers
	SshLogins []string `protobuf:"bytes,12,rep,name=ssh_logins,json=sshLogins,proto3" json:"ssh_logins,omitempty"`
	// access_requests defines access to access requests
	AccessRequests *ResourceAccess `protobuf:"bytes,13,opt,name=access_requests,json=accessRequests,proto3" json:"access_requests,omitempty"`
}

func (x *ClusterACL) Reset() {
	*x = ClusterACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterACL) ProtoMessage() {}

func (x *ClusterACL) ProtoReflect() protoreflect.Message {
	mi := &file_v1_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterACL.ProtoReflect.Descriptor instead.
func (*ClusterACL) Descriptor() ([]byte, []int) {
	return file_v1_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterACL) GetSessions() *ResourceAccess {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *ClusterACL) GetAuthConnectors() *ResourceAccess {
	if x != nil {
		return x.AuthConnectors
	}
	return nil
}

func (x *ClusterACL) GetRoles() *ResourceAccess {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ClusterACL) GetUsers() *ResourceAccess {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ClusterACL) GetTrustedClusters() *ResourceAccess {
	if x != nil {
		return x.TrustedClusters
	}
	return nil
}

func (x *ClusterACL) GetEvents() *ResourceAccess {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ClusterACL) GetTokens() *ResourceAccess {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *ClusterACL) GetServers() *ResourceAccess {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *ClusterACL) GetApps() *ResourceAccess {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *ClusterACL) GetDbs() *ResourceAccess {
	if x != nil {
		return x.Dbs
	}
	return nil
}

func (x *ClusterACL) GetKubeservers() *ResourceAccess {
	if x != nil {
		return x.Kubeservers
	}
	return nil
}

func (x *ClusterACL) GetSshLogins() []string {
	if x != nil {
		return x.SshLogins
	}
	return nil
}

func (x *ClusterACL) GetAccessRequests() *ResourceAccess {
	if x != nil {
		return x.AccessRequests
	}
	return nil
}

// ResourceAccess describes access verbs
type ResourceAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list determines "list" access
	List bool `protobuf:"varint,1,opt,name=list,proto3" json:"list,omitempty"`
	// read determines "read" access
	Read bool `protobuf:"varint,2,opt,name=read,proto3" json:"read,omitempty"`
	// edit determines "edit" access
	Edit bool `protobuf:"varint,3,opt,name=edit,proto3" json:"edit,omitempty"`
	// create determines "create" access
	Create bool `protobuf:"varint,4,opt,name=create,proto3" json:"create,omitempty"`
	// delete determines "delete" access
	Delete bool `protobuf:"varint,5,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *ResourceAccess) Reset() {
	*x = ResourceAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAccess) ProtoMessage() {}

func (x *ResourceAccess) ProtoReflect() protoreflect.Message {
	mi := &file_v1_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAccess.ProtoReflect.Descriptor instead.
func (*ResourceAccess) Descriptor() ([]byte, []int) {
	return file_v1_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceAccess) GetList() bool {
	if x != nil {
		return x.List
	}
	return false
}

func (x *ResourceAccess) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

func (x *ResourceAccess) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *ResourceAccess) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *ResourceAccess) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

var File_v1_cluster_proto protoreflect.FileDescriptor

var file_v1_cluster_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x22, 0x81, 0x01, 0x0a, 0x07, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x43, 0x4c, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x22, 0xca, 0x06, 0x0a,
	0x0a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x43, 0x4c, 0x12, 0x40, 0x0a, 0x08, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a,
	0x0f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x03, 0x64,
	0x62, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x03,
	0x64, 0x62, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0b,
	0x6b, 0x75, 0x62, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x73, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x7c, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6c, 0x69, 0x62,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_cluster_proto_rawDescOnce sync.Once
	file_v1_cluster_proto_rawDescData = file_v1_cluster_proto_rawDesc
)

func file_v1_cluster_proto_rawDescGZIP() []byte {
	file_v1_cluster_proto_rawDescOnce.Do(func() {
		file_v1_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_cluster_proto_rawDescData)
	})
	return file_v1_cluster_proto_rawDescData
}

var file_v1_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_v1_cluster_proto_goTypes = []interface{}{
	(*Cluster)(nil),        // 0: teleport.terminal.v1.Cluster
	(*ClusterACL)(nil),     // 1: teleport.terminal.v1.ClusterACL
	(*ResourceAccess)(nil), // 2: teleport.terminal.v1.ResourceAccess
}
var file_v1_cluster_proto_depIdxs = []int32{
	1,  // 0: teleport.terminal.v1.Cluster.acl:type_name -> teleport.terminal.v1.ClusterACL
	2,  // 1: teleport.terminal.v1.ClusterACL.sessions:type_name -> teleport.terminal.v1.ResourceAccess
	2,  // 2: teleport.terminal.v1.ClusterACL.auth_connectors:type_name -> teleport.terminal.v1.ResourceAccess
	2,  // 3: teleport.terminal.v1.ClusterACL.roles:type_name -> teleport.terminal.v1.ResourceAccess
	2,  // 4: teleport.terminal.v1.ClusterACL.users:type_name -> teleport.terminal.v1.ResourceAccess
	2,  // 5: teleport.terminal.v1.ClusterACL.trusted_clusters:type_name -> teleport.terminal.v1.ResourceAccess
	2,  // 6: teleport.terminal.v1.ClusterACL.events:type_name -> teleport.terminal.v1.ResourceAccess
	2,  // 7: teleport.terminal.v1.ClusterACL.tokens:type_name -> teleport.terminal.v1.ResourceAccess
	2,  // 8: teleport.terminal.v1.ClusterACL.servers:type_name -> teleport.terminal.v1.ResourceAccess
	2,  // 9: teleport.terminal.v1.ClusterACL.apps:type_name -> teleport.terminal.v1.ResourceAccess
	2,  // 10: teleport.terminal.v1.ClusterACL.dbs:type_name -> teleport.terminal.v1.ResourceAccess
	2,  // 11: teleport.terminal.v1.ClusterACL.kubeservers:type_name -> teleport.terminal.v1.ResourceAccess
	2,  // 12: teleport.terminal.v1.ClusterACL.access_requests:type_name -> teleport.terminal.v1.ResourceAccess
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_v1_cluster_proto_init() }
func file_v1_cluster_proto_init() {
	if File_v1_cluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_cluster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_cluster_proto_goTypes,
		DependencyIndexes: file_v1_cluster_proto_depIdxs,
		MessageInfos:      file_v1_cluster_proto_msgTypes,
	}.Build()
	File_v1_cluster_proto = out.File
	file_v1_cluster_proto_rawDesc = nil
	file_v1_cluster_proto_goTypes = nil
	file_v1_cluster_proto_depIdxs = nil
}
